<?xml version="1.0" encoding="UTF-8" ?>   
    <!DOCTYPE mapper   
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.xx.supermarket.entity.Order">

     <!-- 实体类与数据库映射字段部分  start -->
	<resultMap id="ResultMapOrder" type="com.xx.supermarket.entity.Order">
        <result property="id" column="id"  jdbcType="INTEGER"/>
        <result property="isDelete" column="isDelete"  jdbcType="INTEGER"/>
        <result property="orderTime" column="orderTime"  jdbcType="TIMESTAMP"/>
        <result property="status" column="status"  jdbcType="INTEGER"/>
        <result property="total" column="total"  jdbcType="DOUBLE"/>
        <result property="uid" column="uid"  jdbcType="VARCHAR"/>
        <result property="userId" column="userId"  jdbcType="INTEGER"/>
	</resultMap>
	 <!-- 实体类与数据库映射字段部分  end -->
	 
	 <!-- 声明数据库字段 -->
	<sql id="Order_field">
           id,
           isDelete,
           orderTime,
           status,
           total,
           uid,
           userId
	</sql>
	
	<!-- 实体类属性  -->
	<sql id="Order_insert">
        	#{id} ,
        	#{isDelete} ,
        	#{orderTime} ,
        	#{status} ,
        	#{total} ,
        	#{uid} ,
        	#{userId} 
	</sql>
	
	<!-- 执行修改时 数据库字段和表字段比较 -->
	<sql id="Order_update">
		    <if test="isDelete != null" >
	            isDelete = #{isDelete} ,
	        </if>
		    <if test="orderTime != null" >
	            orderTime = #{orderTime} ,
	        </if>
		    <if test="status != null" >
	            status = #{status} ,
	        </if>
		    <if test="total != null" >
	            total = #{total} ,
	        </if>
		    <if test="uid != null" >
	            uid = #{uid} ,
	        </if>
		    <if test="userId != null" >
	            userId = #{userId} 
	        </if>
	</sql>
	
	<!-- 查询时条件 -->
	<sql id="Order_where">
	        <if test="id != null " >
	            and id =#{id}
	        </if>
	        <if test="isDelete != null " >
	            and isDelete =#{isDelete}
	        </if>
	        <if test="orderTime != null " >
	            and orderTime =#{orderTime}
	        </if>
	        <if test="status != null " >
	            and status =#{status}
	        </if>
	        <if test="total != null " >
	            and total =#{total}
	        </if>
	        <if test="uid != null " >
	            and uid =#{uid}
	        </if>
	        <if test="userId != null " >
	            and userId =#{userId}
	        </if>
	</sql>
	
	<!-- 以下是sql执行语句 
	     注意：1)参数类型和返回值类型,通用查询 xxBySqlId 注意将默认的 id修改为方法需要的。
	      2)非自定义的方法已经是basedao注明的。方法名一定要和id相同
	      3)自定义类的方法注意是否和共有方法重名id
	      4)执行sql出现顺序和baseDao方法一致，便于查询请勿随意添加，自定义的sql一律放在自定义sql区域
	 -->
	
	<!-- 
	 1.方法描述：新增数据
	 2.参数：实体类
	 3.返回：主键
	-->
	<insert id="insert" parameterType="com.xx.supermarket.entity.Order" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `order` (
        <include refid="Order_field" />
        ) VALUES (
        <include refid="Order_insert" />       
        )
	</insert>
	
	<!-- 
	 1.方法描述：新增数据(自定义sqlId)
	 2.参数：实体类
	 3.返回：主键
	-->
	<insert id="myInsertSqlId" parameterType="com.xx.supermarket.entity.Order" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `order` (
        <include refid="Order_field" />
        ) VALUES (
        <include refid="Order_insert" />       
        )
	</insert>
	
	<!-- 
	 1.方法描述：删除数据
	 2.参数：主键id
	-->
	<delete id="delete" parameterType="java.lang.String">
	 delete from `order` where id=#{id}
	</delete>
	
	 <!-- 
	 1.方法描述：删除数据(自定义)由于参数未知 因此在使用的时候注意要对参数进行判断。这里仅仅是一个模板
	 2.参数：map
	-->
	<delete id="deleteBySqId" parameterType="map">
	 delete from `order` where 1=1
	 <include refid="Order_where" />
	</delete>
	
	<!-- 
	 1.方法描述：修改数据
	 2.参数：实体类
	-->
	<update id="update" parameterType="com.xx.supermarket.entity.Order">
        UPDATE `order`
        <set>
	        <include refid="Order_update" />
	    </set>
        WHERE 1=1
        	and id=#{id}        
	</update>
	
	<!-- 
	 1.方法描述：select查询单个
	 2.参数：id
	-->
	<select id="load" resultMap="ResultMapOrder" parameterType="java.lang.String">
		select 	<include refid="Order_field" />
 		from `order` 
 		where id=#{id}
	</select>
	
	
	<!-- 
	 1.方法描述：select查询单个(自定义)
	 2.参数：map
	-->
	<select id="loadBySqlId" resultMap="ResultMapOrder" parameterType="map">
		select 	<include refid="Order_field" />
 		from `order` 
 		WHERE 1=1
        	<include refid="Order_where" />
	</select>
	
	<!-- 
	 1.方法描述：select查询单个(自定义)
	 2.参数：实体类
	-->
	<select id="loadBySqlId2" resultMap="ResultMapOrder" parameterType="com.xx.supermarket.entity.Order">
		select 	<include refid="Order_field" />
 		from `order` 
 		WHERE 1=1
        	<include refid="Order_where" />
	</select>
	
	<!-- 
	 1.方法描述：用于select查询所有
	 2.参数：map
	-->
	<select id="list" resultMap="ResultMapOrder" parameterType="map">
		select <include refid="Order_field" />
 		from `order` where 1=1
 		<include refid="Order_where" /> 
	</select>
	
	
	<!-- 
	 1.方法描述：用于select查询所有(自定义)
	 2.参数：map
	-->
	<select id="listBySqlId" resultMap="ResultMapOrder" parameterType="map">
		select <include refid="Order_field" />
 		from `order` where 1=1
 		<include refid="Order_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：用于select查询所有
	 2.参数：无参数
	-->
	<select id="listAll" resultMap="ResultMapOrder">
		select <include refid="Order_field" />
 		from `order` 
	</select>
	
	
	<!-- 
	 1.方法描述：用于select查询所有(自定义)
	 2.参数：实体类
	-->
	<select id="listAllByEntity" resultMap="ResultMapOrder" parameterType="com.xx.supermarket.entity.Order">
		select <include refid="Order_field" />
 		from `order` where 1=1
 		<include refid="Order_where" /> 
	</select>
	
	
	
	<!-- 
	 1.方法描述：查询分页
	 2.参数：实体类
	-->
	<select id="findByEntity" resultMap="ResultMapOrder" parameterType="com.xx.supermarket.entity.Order">
		select <include refid="Order_field" />
 		from `order` where 1=1 and isDelete=0
 		<include refid="Order_where" /> 
 		order by id desc
	</select>
	
	<!-- 
	 1.方法描述：查询分页(自定义)
	 2.参数：实体类
	-->
	<select id="findByEntitySqlId" resultMap="ResultMapOrder" parameterType="com.xx.supermarket.entity.Order">
		select <include refid="Order_field" />
 		from `order` where 1=1
 		<include refid="Order_where" /> 
 		order by id desc
	</select>
	
	
	<!-- 
	 1.方法描述：查询分页
	 2.参数：map
	-->
	<select id="findByMap" resultMap="ResultMapOrder" parameterType="map">
		select <include refid="Order_field" />
 		from `order` where 1=1
 		<include refid="Order_where" /> 
 		order by id desc
	</select>
	
	<!-- 
	 1.方法描述：查询分页(自定义)
	 2.参数：map
	-->
	<select id="findByMapSqlId" resultMap="ResultMapOrder" parameterType="map">
		select <include refid="Order_field" />
 		from `order` where 1=1
 		<include refid="Order_where" /> 
 		order by id desc
	</select>
	
	
	<!-- 
	 1.方法描述：查询分页 非插件
	 2.参数：map
	-->
	<select id="find" resultMap="ResultMapOrder" parameterType="map">
		select <include refid="Order_field" />
 		from `order` where 1=1
 		<include refid="Order_where" /> 
 		order by id desc limit #{pageOffset},#{pageSize}
	</select>
	
	<!-- 
	 1.方法描述：查询分页  非插件    总数
	 2.参数：map
	-->
	<select id="find_count" resultMap="ResultMapOrder" parameterType="map">
		select count(*)
 		from `order` where 1=1
 		<include refid="Order_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：查询分页  非插件   自定义
	 2.参数：map
	-->
	<select id="findBySqlId" resultMap="ResultMapOrder" parameterType="map">
		select <include refid="Order_field" />
 		from `order` where 1=1
 		<include refid="Order_where" /> 
 		order by id desc limit #{pageOffset},#{pageSize}
	</select>
	
	<!-- 
	 1.方法描述：查询分页  非插件   总数  自定义
	 2.参数：map
	-->
	<select id="findBySqlId_count" resultMap="ResultMapOrder" parameterType="map">
		select count(*)
 		from `order` where 1=1
 		<include refid="Order_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：批量插入
	 2.参数：集合/数组
	-->
	<insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO `order` (
        <include refid="Order_field" />
        ) VALUES 
        <foreach collection="list" item="item" index="index"
			separator=",">
			(
			#{item.id},
			
			#{item.isDelete},
			
			#{item.orderTime},
			
			#{item.status},
			
			#{item.total},
			
			#{item.uid},
			
			#{item.userId}
			
			)
		</foreach>       
        
	</insert>
    
    <!-- 
	 1.方法描述：批量修改
	 2.参数：集合/数组
	-->
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index"
			separator=";">
        UPDATE 
        `order` 
        <set>
		    <if test="item.isDelete != null" >
	        isDelete = #{item.isDelete},
	        </if>
		    <if test="item.orderTime != null" >
	        orderTime = #{item.orderTime},
	        </if>
		    <if test="item.status != null" >
	        status = #{item.status},
	        </if>
		    <if test="item.total != null" >
	        total = #{item.total},
	        </if>
		    <if test="item.uid != null" >
	        uid = #{item.uid},
	        </if>
		    <if test="item.userId != null" >
	        userId = #{item.userId}
	        </if>
	    </set>
        WHERE 
        	1=1 
        </foreach>    
	</update>

</mapper>

