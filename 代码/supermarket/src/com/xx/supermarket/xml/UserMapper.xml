<?xml version="1.0" encoding="UTF-8" ?>   
    <!DOCTYPE mapper   
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.xx.supermarket.entity.User">

     <!-- 实体类与数据库映射字段部分  start -->
	<resultMap id="ResultMapUser" type="com.xx.supermarket.entity.User">
        <result property="id" column="id"  jdbcType="INTEGER"/>
        <result property="loginName" column="loginName"  jdbcType="VARCHAR"/>
        <result property="realName" column="realName"  jdbcType="VARCHAR"/>
        <result property="phone" column="phone"  jdbcType="VARCHAR"/>
        <result property="isVip" column="isVip"  jdbcType="INTEGER"/>
        <result property="isDelete" column="isDelete"  jdbcType="INTEGER"/>
        <result property="passWord" column="passWord"  jdbcType="VARCHAR"/>
        <result property="sex" column="sex"  jdbcType="INTEGER"/>
        <result property="jf" column="jf"  jdbcType="INTEGER"/>
        <result property="address" column="address"  jdbcType="VARCHAR"/>
         <result property="level" column="level"  jdbcType="INTEGER"/>
	</resultMap>
	 <!-- 实体类与数据库映射字段部分  end -->
	 
	 <!-- 声明数据库字段 -->
	<sql id="User_field">
           id,
           loginName,
           realName,
           phone,
           isVip,
           isDelete,
           passWord,
           sex,
           jf,
           address,
           level
	</sql>
	
	<!-- 实体类属性  -->
	<sql id="User_insert">
        	#{id} ,
        	#{loginName} ,
        	#{realName} ,
        	#{phone} ,
        	#{isVip} ,
        	#{isDelete} ,
        	#{passWord} ,
        	#{sex} ,
        	#{jf} ,
        	#{address},
        	#{level} 
	</sql>
	
	<!-- 执行修改时 数据库字段和表字段比较 -->
	<sql id="User_update">
		    <if test="loginName != null" >
	            loginName = #{loginName} ,
	        </if>
		    <if test="realName != null" >
	            realName = #{realName} ,
	        </if>
		    <if test="phone != null" >
	            phone = #{phone} ,
	        </if>
		    <if test="isVip != null" >
	            isVip = #{isVip} ,
	        </if>
		    <if test="isDelete != null" >
	            isDelete = #{isDelete} ,
	        </if>
		    <if test="passWord != null" >
	            passWord = #{passWord} ,
	        </if>
		    <if test="sex != null" >
	            sex = #{sex} ,
	        </if>
		    <if test="jf != null" >
	            jf = #{jf} ,
	        </if>
		    <if test="address != null" >
	            address = #{address}, 
	        </if>
	         <if test="level != null" >
	            level = #{level} 
	        </if>
	</sql>
	
	<!-- 查询时条件 -->
	<sql id="User_where">
	        <if test="id != null " >
	            and id =#{id}
	        </if>
	        <if test="loginName != null " >
	            and loginName =#{loginName}
	        </if>
	        <if test="realName != null " >
	            and realName =#{realName}
	        </if>
	        <if test="phone != null " >
	            and phone =#{phone}
	        </if>
	        <if test="isVip != null " >
	            and isVip =#{isVip}
	        </if>
	        <if test="isDelete != null " >
	            and isDelete =#{isDelete}
	        </if>
	        <if test="passWord != null " >
	            and passWord =#{passWord}
	        </if>
	        <if test="sex != null " >
	            and sex =#{sex}
	        </if>
	        <if test="jf != null " >
	            and jf =#{jf}
	        </if>
	        <if test="address != null " >
	            and address =#{address}
	        </if>
	         <if test="level != null" >
	            and level = #{level} 
	        </if>
	</sql>
	
	<!-- 以下是sql执行语句 
	     注意：1)参数类型和返回值类型,通用查询 xxBySqlId 注意将默认的 id修改为方法需要的。
	      2)非自定义的方法已经是basedao注明的。方法名一定要和id相同
	      3)自定义类的方法注意是否和共有方法重名id
	      4)执行sql出现顺序和baseDao方法一致，便于查询请勿随意添加，自定义的sql一律放在自定义sql区域
	 -->
	
	<!-- 
	 1.方法描述：新增数据
	 2.参数：实体类
	 3.返回：主键
	-->
	<insert id="insert" parameterType="com.xx.supermarket.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (
        <include refid="User_field" />
        ) VALUES (
        <include refid="User_insert" />       
        )
	</insert>
	
	<!-- 
	 1.方法描述：新增数据(自定义sqlId)
	 2.参数：实体类
	 3.返回：主键
	-->
	<insert id="myInsertSqlId" parameterType="com.xx.supermarket.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (
        <include refid="User_field" />
        ) VALUES (
        <include refid="User_insert" />       
        )
	</insert>
	
	<!-- 
	 1.方法描述：删除数据
	 2.参数：主键id
	-->
	<delete id="delete" parameterType="java.lang.String">
	 delete from user where id=#{id}
	</delete>
	
	 <!-- 
	 1.方法描述：删除数据(自定义)由于参数未知 因此在使用的时候注意要对参数进行判断。这里仅仅是一个模板
	 2.参数：map
	-->
	<delete id="deleteBySqId" parameterType="map">
	 delete from user where 1=1
	 <include refid="User_where" />
	</delete>
	
	<!-- 
	 1.方法描述：修改数据
	 2.参数：实体类
	-->
	<update id="update" parameterType="com.xx.supermarket.entity.User">
        UPDATE user
        <set>
	        <include refid="User_update" />
	    </set>
        WHERE 1=1
        	and id=#{id}        
	</update>
	
	<!-- 
	 1.方法描述：select查询单个
	 2.参数：id
	-->
	<select id="load" resultMap="ResultMapUser" parameterType="java.lang.String">
		select 	<include refid="User_field" />
 		from user 
 		where id=#{id}
	</select>
	
	
	<!-- 
	 1.方法描述：select查询单个(自定义)
	 2.参数：map
	-->
	<select id="loadBySqlId" resultMap="ResultMapUser" parameterType="map">
		select 	<include refid="User_field" />
 		from user 
 		WHERE 1=1
        	<include refid="User_where" />
	</select>
	
	<!-- 
	 1.方法描述：select查询单个(自定义)
	 2.参数：实体类
	-->
	<select id="loadBySqlId2" resultMap="ResultMapUser" parameterType="com.xx.supermarket.entity.User">
		select 	<include refid="User_field" />
 		from user 
 		WHERE 1=1
        	<include refid="User_where" />
	</select>
	
	<!-- 
	 1.方法描述：用于select查询所有
	 2.参数：map
	-->
	<select id="list" resultMap="ResultMapUser" parameterType="map">
		select <include refid="User_field" />
 		from user where 1=1
 		<include refid="User_where" /> 
	</select>
	
	
	<!-- 
	 1.方法描述：用于select查询所有(自定义)
	 2.参数：map
	-->
	<select id="listBySqlId" resultMap="ResultMapUser" parameterType="map">
		select <include refid="User_field" />
 		from user where 1=1
 		<include refid="User_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：用于select查询所有
	 2.参数：无参数
	-->
	<select id="listAll" resultMap="ResultMapUser">
		select <include refid="User_field" />
 		from user 
	</select>
	
	
	<!-- 
	 1.方法描述：用于select查询所有(自定义)
	 2.参数：实体类
	-->
	<select id="listAllByEntity" resultMap="ResultMapUser" parameterType="com.xx.supermarket.entity.User">
		select <include refid="User_field" />
 		from user where 1=1
 		<include refid="User_where" /> 
	</select>
	
	
	
	<!-- 
	 1.方法描述：查询分页
	 2.参数：实体类
	-->
	<select id="findByEntity" resultMap="ResultMapUser" parameterType="com.xx.supermarket.entity.User">
		select <include refid="User_field" />
 		from user where 1=1
 		<include refid="User_where" /> 
 		order by id desc
	</select>
	
	<!-- 
	 1.方法描述：查询分页(自定义)
	 2.参数：实体类
	-->
	<select id="findByEntitySqlId" resultMap="ResultMapUser" parameterType="com.xx.supermarket.entity.User">
		select <include refid="User_field" />
 		from user where 1=1
 		<include refid="User_where" /> 
 		order by id desc
	</select>
	
	
	<!-- 
	 1.方法描述：查询分页
	 2.参数：map
	-->
	<select id="findByMap" resultMap="ResultMapUser" parameterType="map">
		select <include refid="User_field" />
 		from user where 1=1
 	    <if test="loginName != null " >
            and  loginName like '%${loginName}%'
        </if>
 		<include refid="User_where" /> 
 		order by id desc
	</select>
	
	<!-- 
	 1.方法描述：查询分页(自定义)
	 2.参数：map
	-->
	<select id="findByMapSqlId" resultMap="ResultMapUser" parameterType="map">
		select <include refid="User_field" />
 		from user where 1=1
 		<include refid="User_where" /> 
 		order by id desc
	</select>
	
	
	<!-- 
	 1.方法描述：查询分页 非插件
	 2.参数：map
	-->
	<select id="find" resultMap="ResultMapUser" parameterType="map">
		select <include refid="User_field" />
 		from user where 1=1
 		<include refid="User_where" /> 
 		order by id desc limit #{pageOffset},#{pageSize}
	</select>
	
	<!-- 
	 1.方法描述：查询分页  非插件    总数
	 2.参数：map
	-->
	<select id="find_count" resultMap="ResultMapUser" parameterType="map">
		select count(*)
 		from user where 1=1
 	    <if test="loginName != null " >
            and  loginName like '%${loginName}%'
        </if>
 		<include refid="User_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：查询分页  非插件   自定义
	 2.参数：map
	-->
	<select id="findBySqlId" resultMap="ResultMapUser" parameterType="map">
		select <include refid="User_field" />
 		from user where 1=1
 		<include refid="User_where" /> 
 		order by id desc limit #{pageOffset},#{pageSize}
	</select>
	
	<!-- 
	 1.方法描述：查询分页  非插件   总数  自定义
	 2.参数：map
	-->
	<select id="findBySqlId_count" resultMap="ResultMapUser" parameterType="map">
		select count(*)
 		from user where 1=1
 		<include refid="User_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：批量插入
	 2.参数：集合/数组
	-->
	<insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO user (
        <include refid="User_field" />
        ) VALUES 
        <foreach collection="list" item="item" index="index"
			separator=",">
			(
			#{item.id},
			
			#{item.loginName},
			
			#{item.realName},
			
			#{item.phone},
			
			#{item.isVip},
			
			#{item.isDelete},
			
			#{item.passWord},
			
			#{item.sex},
			
			#{item.jf},
			
			#{item.address}
			
			)
		</foreach>       
        
	</insert>
    
    <!-- 
	 1.方法描述：批量修改
	 2.参数：集合/数组
	-->
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index"
			separator=";">
        UPDATE 
        user 
        <set>
		    <if test="item.loginName != null" >
	        loginName = #{item.loginName},
	        </if>
		    <if test="item.realName != null" >
	        realName = #{item.realName},
	        </if>
		    <if test="item.phone != null" >
	        phone = #{item.phone},
	        </if>
		    <if test="item.isVip != null" >
	        isVip = #{item.isVip},
	        </if>
		    <if test="item.isDelete != null" >
	        isDelete = #{item.isDelete},
	        </if>
		    <if test="item.passWord != null" >
	        passWord = #{item.passWord},
	        </if>
		    <if test="item.sex != null" >
	        sex = #{item.sex},
	        </if>
		    <if test="item.jf != null" >
	        jf = #{item.jf},
	        </if>
		    <if test="item.address != null" >
	        address = #{item.address}
	        </if>
	    </set>
        WHERE 
        	1=1 
        </foreach>    
	</update>

</mapper>

